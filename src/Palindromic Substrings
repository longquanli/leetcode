Given a string, your task is to count how many palindromic substrings in this string. 
The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters. 

#Version I time limit O(n^3) space O(1)
class Solution:
    def countSubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        def isPalindrome(string):
            left = 0
            right = len(string) - 1
            while left < right:
                if string[left] != string[right]:
                    return False
                left += 1
                right -= 1
            return True
        count = 0
        for i in range(len(s)):
            count += 1
            for j in range(i + 1, len(s)):
                if isPalindrome(s[i:j + 1]):
                    count += 1
        return count
 #Version II Time O(n^2) space O(1) center could be a letter or one between two letters
 class Solution:
    def countSubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        length = len(s)
        count = 0
        for center in range(2 * length - 1):
            left = center // 2
            right = left + center % 2
            while left >=0 and right < length and s[left] == s[right]:
                count += 1
                left -= 1
                right += 1
        return count
 
 
 
