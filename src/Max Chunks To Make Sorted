Given an array arr that is a permutation of [0, 1, ..., arr.length - 1], we split the array into some number of "chunks" (partitions), 
and individually sort each chunk.  After concatenating them, the result equals the sorted array.What is the most number of chunks we 
could have made?

#focus on the point that the chunk can be build right now, which means curMax == index. And notice the coner case that final one.
class Solution(object):
    def maxChunksToSorted(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        count = 1
        curMax = arr[0]
        for index, value in enumerate(arr):
            if curMax < value:
                curMax = value
            elif curMax == index and index != len(arr) - 1:
                count += 1
                curMax = arr[index + 1]
        return count
