We have two integer sequences A and B of the same non-zero length.We are allowed to swap elements A[i] and B[i].  
Note that both elements are in the same index position in their respective sequences.At the end of some number 
of swaps, A and B are both strictly increasing.  (A sequence is strictly increasing if and only 
if A[0] < A[1] < A[2] < ... < A[A.length - 1].)
Given A and B, return the minimum number of swaps to make both sequences strictly increasing.  
It is guaranteed that the given input always makes it possible.

#DP
class Solution:
    def minSwap(self, A, B):
        n1, s1 = 0, 1
        for i in range(1, len(A)):
            n2 = s2 = float('inf')
            if A[i - 1] < A[i] and B[i - 1] < B[i]:
                n2 = min(n1, n2)
                s2 = min(s2, s1 + 1)
            if A[i - 1] < B[i] and B[i - 1] < A[i]:
                n2 = min(n2, s1)
                s2 = min(s2, n1 + 1)
            n1, s1 = n2, s2
     return min(n1, s1)
