Given an array of non-negative integers, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position.
Your goal is to reach the last index in the minimum number of jumps.

#Version I Time O(n^2) Space O(n) slow
class Solution(object):
    def jump(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        dp = [0] * len(nums)
        for i, value in enumerate(nums):
            for j in range(1, nums[i] + 1):
                if j + i < len(nums):
                    if dp[j + i] == 0:
                        dp[j + i] = dp[i] + 1
                    else:
                        dp[j + i] = min(dp[j + i], dp[i] + 1)
        return dp[len(nums) - 1]
#Version II Time O(n) Space O(1) index i can not arrive the last one
class Solution(object):
    def jump(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        count = 0
        maxdist = 0
        end = maxdist
        for i in range(len(nums) - 1):
            maxdist = max(i + nums[i], maxdist)
            if i == end:
                count += 1
                end = maxdist
        return count
